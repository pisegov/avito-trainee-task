#+title: Кинопоиск

#+html: <a href>
#+html:   <img src="assets/1.jpg" width="180"/>
#+html:   <img src="assets/2.jpg" width="180"/>
#+html:   <img src="assets/3.jpg" width="180"/>
#+html:   <img src="assets/4.jpg" width="180"/>
#+html:   <img src="assets/5.jpg" width="180"/>
#+html:   <img src="assets/6.jpg" width="180"/>
#+html:   <img src="assets/7.jpg" width="180"/>
#+html:   <img src="assets/8.jpg" width="180"/>
#+html: </a>

* Инструкция по запуску
- Для сборки использовать Android Studio Hedgehog 2023.1.1 Patch 2 или новее
  - Версия Android Gradle Pluging не ниже 8.2.2

- В файл ~local.properties~ в корне проекта положить константы ~BASE_URL~ и ~API_KEY~
#+begin_src
BASE_URL="https://api.kinopoisk.dev/"
API_KEY="<ваш_api_key>"
#+end_src

- Собрать приложение

* Описание реализации
Состоит из двух страниц
1. Страница со списком всех фильмов
2. Страница отдельного фильма

** Экран всех фильмов
- Отображается список фильмов и сериалов в виде вертикального списка постеров с двумя колонками
  - Если постер загрузить не удалось, то отображается текст с названием фильма

- Реализована пагинация
  - Также отображение индикатора загрузки и сообщения о неудачной загрузке

- Можно отфильтровать выдачу по году, стране и возрастному рейтингу
  - По нажатию на FloatingActionButton в левом нижнем углу открывается BottomSheet диалог для выбора фильтра

- Реализован поиск по названию фильма
  - Для поиска реализована задержка на 1 секунду при вводе
  - К результатам поиска по названию так же применяются фильтры

- Можно перейти на страницу фильма из выдачи
*** Фильтрация
#+html: <a href>
#+html:   <img src="assets/filter_1.jpg" width="180"/>
#+html:   <img src="assets/filter_2.jpg" width="180"/>
#+html:   <img src="assets/filter_3.jpg" width="180"/>
#+html:   <img src="assets/filter_4.jpg" width="180"/>
#+html:   <img src="assets/filter_5.jpg" width="180"/>
#+html: </a>

**** Год выхода: от 1874 до 2050
- Если ввести год только в одно поле, выдача будет фильтроваться только по этому году
- Если ввести год в оба поля, выдача будет фильтроваться по промежутку
- Реализована валидация ввода
  - Начало интервала должно быть не больше конца
  - Начало не меньше 1874, конец не больше 2050
  - Длина ввода не больше 4
**** Рейтинг Кинопоиска
- От введенного значения до 10
- Реализована валидация ввода
  - Введенное значение находится в промежутке от 0.0 до 10.0
  - Длина ввода не больше 4 симоволов
  - Вводится корректное число
**** Тип контента, страны, сети производтсва, жанры, возрастной рейтинг
- Реализованы в виде списка с кнопками
- По нажатию кнопки она выделяется и применяется фильтр
- Можно выбрать как несколько кнопок из одного списка, так и из разных
- Значения для стран, жанров и типов контента загружаются из сети

** Экран деталей фильма
- Отображается информация о фильме
  - Название
  - Описание
  - Рейтинг кинопоиска
  - Жанры
  - Отзывы
  - Актеры
  - Изображения
  - Эпизоды сериала

- В случае, если не удается загрузить изображение
  - Backdrop: заменяется на постер фильма
  - Изображение в списке или постер: заменяется на заглушку

- В верхнем левом углу экрана реализована кнопка "назад" с возможностью перехода обратно к каталогу с сохранением позиции в списке и фильтров

*** Списки (актеров, отзывов, изображений и эпизодов)
- В случае, если какой-то из списков пуст или нет описания, реализована заглушка вида "Нет отзывов / Нет информации об актерах"
- Для всех списков реализована пагинация
- Для всех списков реализовано отображение индикатора загрузки
- Список эпизодов фильтруется по положительному числу номера сезона и сортируется в возрастающем порядке
- Из списка изображений убираются обложки

** Общее
- Поддержаны темная и светлая темы устройства
- Приложение разделено на модули

* Использованные технологии и подходы
- Язык: Kotlin
- Работа с сетью: Retrofit, OkHttp
- Многопоточность: Kotlin Coroutines/Flow
- View: XML
- Сериализатор: Kotlinx Serialization
- Навигация: Fragment
- Архитектура: MVVM
- DI: Dagger
- Загрузка изображений: Coil
- Списки: EpoxyRecyclerView
- Пагинация: Paging3
- БД: Room, SQLite
